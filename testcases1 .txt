Test Cases for functions:

* makecacheMatrix
* cacheSolve

Assuming you working directory is set to where the cachematrix.R file is located.

Test Case 1: 2x2 matrix
=======================

We set a as a 2x2 matrix

> a <- matrix(1:4, ncol = 2)
> a
     [,1] [,2]
[1,]    1    3
[2,]    2    4

now manually calculate the inverse

> solve(a)
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

now use the provided functions:

> source("cachematrix.R")
> b <- makeCacheMatrix(matrix(1:4, ncol = 2))
> b$get()
    [,1] [,2]
[1,]    1    3
[2,]    2    4
> cacheSolve(b)
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> b$getinverse()
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

now call again cacheSolve to verify that is using the cache:

> cacheSolve(b)
getting cached data
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

Test Case 2: 1000X1000 matrix
=============================

> c <- matrix(sample.int(3000000, 1000000), ncol = 1000)
> d <- makeCacheMatrix(matrix(sample.int(3000000, 1000000), ncol = 1000))
> cacheSolve(d)
                 [,1]          [,2]          [,3]          [,4]          [,5]          [,6]          [,7]          [,8]
   [1,]  7.542375e-09  4.590306e-08 -5.563254e-08 -7.247298e-08 -1.394760e-07 -4.834364e-08 -8.917456e-08 -4.273996e-08
                 [,9]         [,10]         [,11]         [,12]         [,13]         [,14]         [,15]         [,16]
> cacheSolve(d)
getting cached data
                 [,1]          [,2]          [,3]          [,4]          [,5]          [,6]          [,7]          [,8]
   [1,]  7.542375e-09  4.590306e-08 -5.563254e-08 -7.247298e-08 -1.394760e-07 -4.834364e-08 -8.917456e-08 -4.273996e-08
                 [,9]         [,10]         [,11]         [,12]         [,13]         [,14]         [,15]         [,16]
   [1,] -1.923268e-08  7.059241e-09 -6.706677e-09  9.647786e-09  1.373203e-07  4.366610e-08 -2.082304e-08 -4.621670e-08

I beleive you noticed the difference in time the first time the cacheSolve function is called
compared with the second time.

Exceptions handled:
===================

1. x not a matrix

> makeCacheMatrix(c(1,2,3))
only matrix object allowed
[1] NA
> makeCacheMatrix(("Hello"))
only matrix object allowed
[1] NA
> makeCacheMatrix(as.list(w = 1, x = "K"))
only matrix object allowed
[1] NA

2. x not a square matrix

> makeCacheMatrix(matrix(1:6, ncol = 3))
only square matrix allowed
[1] NA

=============
Special Case: singular matrix. I did not inlcude the code because it was out
              of the scope of the assignment but wnated to make sure everyone
              using these functions understand this case
=============
When the function makeCacheMatrix(x) returns an error similar to:

 Error in solve.default(data, ...) : 
  Lapack routine dgesv: system is exactly singular:

This indicates that the matrix passed 'x' is singular (inverse can't be calculated)

This could be solved in two ways:

1. by adding an if statement like:
if(class(try(solve(m),silent=T))!="matrix") {
	message("inverse can't be calculated")
	return(NA)
}

2. By installing the package matrixcalc and using the function is.singular.matrix
   The code to add will be:

   ## at the top of the file
   install.packages("matrixcalc")
   library(matrixcalc)
   if(is.singular.matrix(mymatrix)) {
	message("you pass a singular matrix, inverse can't be calculated")
	return(NA)
   }